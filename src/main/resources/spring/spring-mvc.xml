<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 可以扫描controller、service、...
    这里让扫描controller，指定controller的包
     -->
    <context:component-scan base-package="cn.xyj.ssm.controller"/>


    <!-- 使用 mvc:annotation-driven代替注解映射器和注解适配器配置
    mvc:annotation-driven默认加载很多的参数绑定方法，
    比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
    实际开发时使用mvc:annotation-driven
     -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <ref bean="fastJsonHttpMessageConverter" />
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="fastJsonHttpMessageConverter"
          class="cn.xyj.ssm.base.common.XyjFastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json; charset=utf-8</value>
            </list>
        </property>
    </bean>

    <!--处理静态资源，不配置则无法使用js等静态资源-->
    <mvc:default-servlet-handler/>
    <!--配置该路径下的东西可以缓存到浏览器-->
    <!--<mvc:resources mapping="/assets/**" location="/assets/"/>-->


    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 视图解析器
    解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
     -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 配置jsp路径的前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!-- 配置jsp路径的后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="350000000"/>
    </bean>

    <!--异常处理：支持普通页面和ajax方式异常处理-->
    <bean id="exceptionResolver" class="cn.xyj.ssm.base.common.exception.XyjSimpleMappingExceptionResolver">
        <!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
        <property name="defaultErrorView" value="error/error"></property>
        <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
        <property name="exceptionAttribute" value="ex"></property>
        <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常以页名作为值 -->
        <property name="exceptionMappings">
            <props>
                <!-- 创建自己所要自定义的异常类 -->
                <prop key="BusinessException">error/500</prop>
                <!-- 还可以继续扩展对不同异常类型的处理 -->
            </props>
        </property>
    </bean>


</beans>